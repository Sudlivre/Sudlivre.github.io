<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Golang 基础语法之二</title>
    <url>/2019/09/28/16-41-18/</url>
    <content><![CDATA[<h2 id="输入和输出"><a href="#输入和输出" class="headerlink" title="输入和输出"></a>输入和输出</h2><p>输出：</p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Print() // 打印</span></span><br><span class="line"><span class="comment">Printf() // 格式化打印</span></span><br><span class="line"><span class="comment">Println() // 打印之后换行</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></tbody></table></figure>

<p>输入：</p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">fmt.Scanln(&amp;x, &amp;y) 阻塞式</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">fmt.Scanf("%d, %f", &amp;x, &amp;y)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">reader := bufio.NewReader(os.Stdin)</span></span><br><span class="line"><span class="comment">s, _ := reader.ReadString('\n')</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></tbody></table></figure>

<h2 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if 语句</h2><figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> 布尔表达式<span class="number">1</span> {</span><br><span class="line">    执行语句</span><br><span class="line">} <span class="keyword">else</span> <span class="keyword">if</span> 布尔表达式<span class="number">2</span> {</span><br><span class="line">    执行语句</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">    执行语句</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>if 语句其他写法</p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> num := <span class="number">4</span>; num &gt; <span class="number">0</span> {</span><br><span class="line">    fmt.Println(num)</span><br><span class="line">}</span><br><span class="line"><span class="comment">// 作用域在if语句里面</span></span><br><span class="line"><span class="comment">// fmt.Println(num) // undefined: num</span></span><br></pre></td></tr></tbody></table></figure>

<h2 id="switch分支语句"><a href="#switch分支语句" class="headerlink" title="switch分支语句"></a>switch 分支语句</h2><figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> var1 {</span><br><span class="line">    <span class="keyword">case</span> val1:</span><br><span class="line">        ...</span><br><span class="line">    <span class="keyword">case</span> val2:</span><br><span class="line">        ...</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        ...</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>switch 其他写法</p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> { <span class="comment">// 直接作用在true上</span></span><br><span class="line">    <span class="keyword">case</span> <span class="literal">true</span>:</span><br><span class="line">        fmt.Println(<span class="string">"true"</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="literal">false</span>:</span><br><span class="line">        fmt.Println(<span class="string">"false"</span>)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> var1 {</span><br><span class="line">    <span class="keyword">case</span> val1, val2, val3:</span><br><span class="line">        fmt.Println(<span class="string">"true"</span>)</span><br><span class="line">    <span class="keyword">case</span> val4:</span><br><span class="line">        fmt.Println(<span class="string">"false"</span>)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> var1 := <span class="string">"go"</span>; var1 { <span class="comment">// 作用域在switch中</span></span><br><span class="line">    <span class="keyword">case</span> val1, val2, val3:</span><br><span class="line">        fmt.Println(<span class="string">"true"</span>)</span><br><span class="line">    <span class="keyword">case</span> val4:</span><br><span class="line">        fmt.Println(<span class="string">"false"</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>fallthrough: 用于穿透 switch，会执行该 case 后面 case 的内容，fallthrough 在 case 最后一行</p>
</blockquote>
<h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for 循环</h2><figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> init; condition; post {</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>for 语句的其他写法</p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> condition {} <span class="comment">// 相当与while循环</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> {}</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> key, value := <span class="keyword">range</span> oldMap {</span><br><span class="line">    newMap[key] = value</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<ul>
<li>break 跳出循环体</li>
<li> continue 跳出一次循环</li>
</ul>
<h2 id="goto"><a href="#goto" class="headerlink" title="goto"></a>goto</h2><figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">goto</span> label</span><br><span class="line">..</span><br><span class="line">..</span><br><span class="line">label:</span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
        <tag>Golang Days</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang 基础语法之一</title>
    <url>/2019/09/28/08-26-25/</url>
    <content><![CDATA[<h2 id="Start-golang"><a href="#Start-golang" class="headerlink" title="Start golang"></a>Start golang</h2><h3 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h3><figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">    fmt.Println(<span class="string">"Hello World"</span>)</span><br><span class="line">    <span class="comment">// Print 不换行</span></span><br><span class="line">    fmt.Print(<span class="string">"Go Go Go!!!"</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h3 id="Run"><a href="#Run" class="headerlink" title="Run"></a>Run</h3><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">go run</span><br><span class="line"></span><br><span class="line">go build</span><br><span class="line"></span><br><span class="line">go install</span><br></pre></td></tr></tbody></table></figure>

<h3 id="go-help"><a href="#go-help" class="headerlink" title="go help"></a>go help</h3><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">go help</span><br><span class="line"></span><br><span class="line">The commands are:</span><br><span class="line"></span><br><span class="line">        bug         start a bug report</span><br><span class="line">        build       compile packages and dependencies</span><br><span class="line">        clean       remove object files and cached files</span><br><span class="line">        doc         show documentation for package or symbol</span><br><span class="line">        env         print Go environment information</span><br><span class="line">        fix         update packages to use new APIs</span><br><span class="line">        fmt         gofmt (reformat) package sources</span><br><span class="line">        generate    generate Go files by processing source</span><br><span class="line">        get         add dependencies to current module and install them</span><br><span class="line">        install     compile and install packages and dependencies</span><br><span class="line">        list        list packages or modules</span><br><span class="line">        mod         module maintenance</span><br><span class="line">        run         compile and run Go program</span><br><span class="line">        test        test packages</span><br><span class="line">        tool        run specified go tool</span><br><span class="line">        version     print Go version</span><br><span class="line">        vet         report likely mistakes in packages</span><br></pre></td></tr></tbody></table></figure>

<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><ul>
<li>静态语言：强类型语言</li>
<li>动态语言：弱类型语言</li>
</ul>
<p>go 语言特性</p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num <span class="keyword">int</span></span><br><span class="line">num = <span class="number">3</span></span><br><span class="line"><span class="keyword">var</span> num2 = <span class="number">4</span></span><br><span class="line"><span class="comment">// 类型推断</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">"string"</span></span><br><span class="line"><span class="comment">// 简短定义</span></span><br><span class="line">num := <span class="number">100</span></span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<ul>
<li>变量必须先定义才能使用。</li>
<li>变量的类型和赋值必须一致。</li>
<li>同一个作用域内，变量名不能冲突。</li>
<li>简短定义方式，左边的变量名至少有一个是新的。</li>
<li>简短定义的方式，不能定义全局变量。</li>
<li>变量的零值。也叫默认值。</li>
<li>变量定义了就要使用否则无法通过编译。</li>
</ul>
</blockquote>
<h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 显式类型定义</span></span><br><span class="line"><span class="keyword">const</span> b <span class="keyword">string</span> = “abc”</span><br><span class="line"><span class="comment">// 隐式类型定义</span></span><br><span class="line"><span class="keyword">const</span> b = “abc”</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    a <span class="keyword">int</span> = <span class="number">100</span></span><br><span class="line">    b</span><br><span class="line">    c <span class="keyword">string</span> = <span class="string">"go"</span></span><br><span class="line">    d</span><br><span class="line">    e</span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>一组常量中，如果某个常量没有初始值，默认和上一行一致</p>
</blockquote>
<h3 id="iota"><a href="#iota" class="headerlink" title="iota"></a>iota</h3><figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    a = <span class="literal">iota</span> <span class="comment">// 0</span></span><br><span class="line">    b = <span class="literal">iota</span> <span class="comment">// 1</span></span><br><span class="line">    c = <span class="literal">iota</span> <span class="comment">// 2</span></span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure>

<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>基本数据类型：</p>
<ul>
<li>布尔类型</li>
<li>数值类型</li>
<li>字符串</li>
</ul>
<p>符合数据类型：</p>
<ul>
<li>array</li>
<li>slice</li>
<li>map</li>
<li>function</li>
<li>pointer</li>
<li>struct</li>
<li>interface</li>
<li>channel</li>
</ul>
<h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><ul>
<li>算术运算符</li>
<li>关系运算符</li>
<li>逻辑运算符  –  / &amp;&amp; / || / ! /</li>
<li> 位运算符 / 按位 &amp; / 按位 | / 异或 ^ / 位清空 &amp;^ / 左移运算 &lt;&lt;/ 右移运算&gt;&gt; /  </li>
<li>赋值运算符</li>
</ul>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
        <tag>Golang Days</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang 基础语法之三</title>
    <url>/2019/09/29/09-28-06/</url>
    <content><![CDATA[<h2 id="随机数"><a href="#随机数" class="headerlink" title="随机数"></a>随机数</h2><p>伪随机数</p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"math/rand"</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"time"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">    num1 = rand.Int()</span><br><span class="line">    num2 = rand.Intn(<span class="number">10</span>)</span><br><span class="line">    rand.Seed(<span class="number">1</span>) <span class="comment">// 设置种子数</span></span><br><span class="line">    num3 = rand.Intn(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 时间戳</span></span><br><span class="line">    timeStamp1 = time.Now().Unix()</span><br><span class="line">    timeStamp2 = time.Now().UnixNano()</span><br><span class="line"></span><br><span class="line">    rand.Seed(timeStamp2) <span class="comment">// 根据时间戳设置随机种子</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生成区间随机数</span></span><br><span class="line">    num4 = rand.Intn(<span class="number">5</span>) + <span class="number">5</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h2 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h2><h3 id="数组定义"><a href="#数组定义" class="headerlink" title="数组定义"></a>数组定义</h3><figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> variable_name [SIZE] variable_type</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> balance1 [<span class="number">10</span>] float <span class="number">32</span></span><br><span class="line"><span class="keyword">var</span> balance2 = [<span class="number">5</span>] floart32{<span class="number">100.0</span>, <span class="number">2.0</span>, <span class="number">3.14</span>, <span class="number">7.0</span>, <span class="number">99.9</span>}</span><br><span class="line">d := [...] <span class="keyword">int</span>{<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>}</span><br><span class="line">e := [<span class="number">5</span>] <span class="keyword">int</span>{<span class="number">4</span>: <span class="number">100</span>} <span class="comment">// [0,0,0,0,100]</span></span><br><span class="line"></span><br><span class="line">arrayLen := <span class="built_in">len</span>(balance1) <span class="comment">// 容器中已存储的数据量</span></span><br><span class="line">arrayCap := <span class="built_in">cap</span>(balance1) <span class="comment">// 容器中能够存储的最大的数量</span></span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"%p\n"</span>, &amp;balance1) <span class="comment">// 获取数组的地址</span></span><br></pre></td></tr></tbody></table></figure>

<h3 id="遍历数组"><a href="#遍历数组" class="headerlink" title="遍历数组"></a>遍历数组</h3><figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line">a := [...]<span class="keyword">float64</span>{<span class="number">5.5</span>, <span class="number">6.6</span>}</span><br><span class="line"><span class="keyword">for</span> i, v := <span class="keyword">range</span> a {</span><br><span class="line">    fmt.Println(i, v)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>数组是值类型 理解为存储的数值本身</p>
</blockquote>
<h3 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h3><figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line">a2 := [<span class="number">3</span>][<span class="number">4</span>]<span class="keyword">int</span>{{<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>}, {<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>}, {<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>}}</span><br></pre></td></tr></tbody></table></figure>

<h2 id="Slice"><a href="#Slice" class="headerlink" title="Slice"></a>Slice</h2><h3 id="切片定义"><a href="#切片定义" class="headerlink" title="切片定义"></a>切片定义</h3><figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> identifier []<span class="keyword">type</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> slice1 []<span class="keyword">type</span> = <span class="built_in">make</span>([]<span class="keyword">type</span>, <span class="built_in">len</span>)</span><br><span class="line"><span class="comment">// 简写</span></span><br><span class="line">slice2 := <span class="built_in">make</span>([]<span class="keyword">type</span>, <span class="built_in">len</span>)</span><br><span class="line"></span><br><span class="line">slice2 = <span class="built_in">append</span>(slice2, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">slice2 = <span class="built_in">append</span>(slice2, slice1...) <span class="comment">// 加上...代表添加里面的元素</span></span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>可以从数组初始化切片，切片是引用类型，改变数组内容，切片内容会一起改变。<br>如果切片容量不够，会重新拷贝一份数组，这是数组改变不会影响切片内容。</p>
</blockquote>
<h2 id="深拷贝和浅拷贝"><a href="#深拷贝和浅拷贝" class="headerlink" title="深拷贝和浅拷贝"></a>深拷贝和浅拷贝</h2><ul>
<li>值语义 拷贝值 深拷贝</li>
<li>引用语义 拷贝地址 浅拷贝</li>
</ul>
<h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><p>Map 通过 hash 表实现</p>
<p>使用 <code>make()</code> 函数创建，方法类似 Slice。不初始化会创建一个 nil map。nil map 不能用来存放键值对</p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> map1 <span class="keyword">map</span>[key_type]value_type <span class="comment">// 声明</span></span><br><span class="line"><span class="keyword">var</span> map2 = <span class="built_in">make</span>(<span class="keyword">map</span>[key_type]value_type) <span class="comment">// 声明并初始化</span></span><br><span class="line"></span><br><span class="line">map2[<span class="number">40</span>] <span class="comment">// key不存在获取默认值</span></span><br><span class="line">value, ok := <span class="keyword">map</span>[key] <span class="comment">// 判断key是否存在</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">map</span>[<span class="number">3</span>] = <span class="number">40</span> <span class="comment">// key存在修改，不存在添加</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">delete</span>(map2, <span class="number">4</span>) <span class="comment">// 删除键值对，不存在不影响</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">len</span>(map2) <span class="comment">// 获取map长度</span></span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>map 是引用类型的数据类型</p>
</blockquote>
<h2 id="string"><a href="#string" class="headerlink" title="string"></a>string</h2><p>语法：””, ``</p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line">s1 := <span class="string">"hello中国"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">len</span>(s1) <span class="comment">// 11 获取的是字节个数</span></span><br></pre></td></tr></tbody></table></figure>

<h2 id="strings包"><a href="#strings包" class="headerlink" title="strings包"></a>strings 包</h2><p>使用 string 的方法需要导包 <code>import "strings"</code></p>
<h2 id="strconv包"><a href="#strconv包" class="headerlink" title="strconv包"></a>strconv 包</h2><p>实现字符串和基本数据类型进行转换</p>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
        <tag>Golang Days</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang 基础语法之五</title>
    <url>/2019/09/29/17-03-35/</url>
    <content><![CDATA[<h2 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h2><h3 id="定义指针"><a href="#定义指针" class="headerlink" title="定义指针"></a>定义指针</h3><figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line">a := <span class="number">10</span> <span class="comment">// 实际变量</span></span><br><span class="line"><span class="keyword">var</span> b *<span class="keyword">int</span> <span class="comment">// 声名指针变量</span></span><br><span class="line">b = &amp;a <span class="comment">// 指针变量指向a的内存地址</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 指针的指针</span></span><br><span class="line"><span class="keyword">var</span> c **<span class="keyword">int</span></span><br><span class="line">c = &amp;b</span><br></pre></td></tr></tbody></table></figure>

<h3 id="数组指针"><a href="#数组指针" class="headerlink" title="数组指针"></a>数组指针</h3><p>数组指针：存储数组的地址<br><code>*[4]int</code></p>
<p>指针数组：存储的数据类型是指针<br><code>[4]*int</code></p>
<h3 id="函数指针"><a href="#函数指针" class="headerlink" title="函数指针"></a>函数指针</h3><p>函数指针：函数默认是一个指针，没有 *</p>
<p>指针函数：函数的返回值是一个指针</p>
<h2 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h2><h3 id="定义结构体"><a href="#定义结构体" class="headerlink" title="定义结构体"></a>定义结构体</h3><figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> {</span><br><span class="line">    name <span class="keyword">string</span></span><br><span class="line">    age <span class="keyword">int</span></span><br><span class="line">    sex <span class="keyword">string</span></span><br><span class="line">    address <span class="keyword">string</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p1 = Person</span><br><span class="line">p1.name = <span class="string">"xiaosi"</span></span><br><span class="line">p1.age = <span class="number">24</span></span><br><span class="line">p1.sex = <span class="string">"girl"</span></span><br><span class="line">p1.address = <span class="string">"cq"</span></span><br><span class="line"></span><br><span class="line">p2 := Person{}</span><br><span class="line"></span><br><span class="line">p3 := Person{name: <span class="string">"jjj"</span>, ...}</span><br><span class="line"></span><br><span class="line">p4 := Person{<span class="string">"jj"</span>, <span class="number">24</span>, <span class="string">"girl"</span>, <span class="string">"cq"</span>}</span><br></pre></td></tr></tbody></table></figure>

<h3 id="结构体指针"><a href="#结构体指针" class="headerlink" title="结构体指针"></a>结构体指针</h3><p>结构体是值类型数据结构， 深拷贝</p>
<p>可以定义结构体指针进行浅拷贝 <code>var pp1 *Person</code></p>
<h3 id="new操作"><a href="#new操作" class="headerlink" title="new操作"></a>new 操作</h3><p>创建某种类型的指针的函数，<code>p1 := new(Person)</code> 返回指针</p>
<h3 id="匿名结构体"><a href="#匿名结构体" class="headerlink" title="匿名结构体"></a>匿名结构体</h3><figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line">s3 := <span class="keyword">struct</span> {</span><br><span class="line">    name <span class="keyword">string</span></span><br><span class="line">    age <span class="keyword">int</span></span><br><span class="line">}{</span><br><span class="line">    name <span class="string">"xs"</span></span><br><span class="line">    age <span class="number">24</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h3 id="匿名字段"><a href="#匿名字段" class="headerlink" title="匿名字段"></a>匿名字段</h3><p>不写字段名，默认类型作为字段，类型不能重复</p>
<h3 id="结构体嵌套"><a href="#结构体嵌套" class="headerlink" title="结构体嵌套"></a>结构体嵌套</h3><p>一个结构体中的字段，是另一个结构体类型</p>
<h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><p>面向对象：OOP</p>
<p>Golang 的结构体嵌套：</p>
<ul>
<li>模拟继承性：is - a 匿名字段：Person</li>
<li> 模拟聚合关系 has - a 例如字段：p Person</li>
</ul>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> {</span><br><span class="line">    name <span class="keyword">string</span></span><br><span class="line">    age <span class="keyword">int</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> {</span><br><span class="line">    Person <span class="comment">// 结构体作为匿名字段 Person字段可作为提升字段，可以直接获取属性和方法</span></span><br><span class="line">    school <span class="keyword">string</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>一个方法就是一个包含了接受者的函数，接受者可以是命名类型或者结构体类型的一个值或者是一个指针。<br>所有给定类型的方法属于该类型的方法集。</p>
<p>语法同函数类似，区别需要有接受者。</p>
<h3 id="方法定义"><a href="#方法定义" class="headerlink" title="方法定义"></a>方法定义</h3><figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Work <span class="keyword">struct</span> {</span><br><span class="line">    name <span class="keyword">string</span></span><br><span class="line">    age <span class="keyword">int</span></span><br><span class="line">    sex <span class="keyword">string</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(w Worker)</span> <span class="title">work</span> <span class="params">()</span></span> {</span><br><span class="line">    fmt.Println(w.name, <span class="string">"is working"</span>)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Worker)</span> <span class="title">rest</span><span class="params">()</span></span> {</span><br><span class="line">    fmt.Println(p.name, <span class="string">"is sleeping"</span>)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">w1 := Worker{<span class="string">"xs"</span>, <span class="number">24</span>, <span class="string">"girl"</span>}</span><br><span class="line">w1.work()</span><br></pre></td></tr></tbody></table></figure>

<p>继承性和方法重写</p>
<h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p>接口是一组方法的签名<br>接口和类型的实现关系，是非侵入式</p>
<ul>
<li>当需要接口类型的对象时，可以使用任意实现类对象代替</li>
<li>接口对象不能访问实现类中的属性 </li>
</ul>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// define interface</span></span><br><span class="line"><span class="keyword">type</span> USB <span class="keyword">interface</span> {</span><br><span class="line">    start()</span><br><span class="line">    end()</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// define struct</span></span><br><span class="line"><span class="keyword">type</span> Mouse <span class="keyword">struct</span> {</span><br><span class="line">    name <span class="keyword">string</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> FlashDisk <span class="keyword">struct</span> {</span><br><span class="line">    name <span class="keyword">string</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// define method</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m Mouse)</span><span class="title">start</span><span class="params">()</span></span> {</span><br><span class="line">    fmt.Println(<span class="string">"sss"</span>)</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m Mouse)</span><span class="title">end</span><span class="params">()</span></span> {</span><br><span class="line">    ftm.Println(<span class="string">"qqq"</span>)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(f FlashDisk)</span><span class="title">start</span><span class="params">()</span></span> {</span><br><span class="line">    fmt.Println(<span class="string">"sss"</span>)</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(f FlashDisk)</span><span class="title">end</span><span class="params">()</span></span> {</span><br><span class="line">    ftm.Println(<span class="string">"qqq"</span>)</span><br><span class="line">}</span><br><span class="line"><span class="comment">// test</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">testInterface</span><span class="params">(usb USB)</span></span> {</span><br><span class="line">    usb.start()</span><br><span class="line">    usb.end()</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>多态：一个事物的多种形态，Golang 通过接口模拟多态</p>
<p>就一个接口而言</p>
<ul>
<li>看成实现本身的类型，能够访问是想类中的属性和方法</li>
<li>看成是对应接口的类型，那就只能访问接口中方法</li>
</ul>
<p>接口的用法：</p>
<ul>
<li>一个函数如果接受接口类型作为参数，那么实际上可以传入该接口的任意实现类型对象作为参数</li>
<li>定义一个类型为接口类型，实际上可以赋值为任意实现类的对象</li>
</ul>
<p>鸭子类型：</p>
<h3 id="空接口"><a href="#空接口" class="headerlink" title="空接口"></a>空接口</h3><figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> A <span class="keyword">interface</span> {</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"><span class="comment">// fmt包下面的Print系列函数就是空接口实现的</span></span><br></pre></td></tr></tbody></table></figure>

<p>结合 slice 和 map 存储不同类型的数据</p>
<h3 id="接口嵌套"><a href="#接口嵌套" class="headerlink" title="接口嵌套"></a>接口嵌套</h3><figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> A <span class="keyword">interface</span> {</span><br><span class="line">    test1()</span><br><span class="line">}</span><br><span class="line"><span class="keyword">type</span> B <span class="keyword">interface</span> {</span><br><span class="line">    test2()</span><br><span class="line">}</span><br><span class="line"><span class="keyword">type</span> C <span class="keyword">interface</span> { <span class="comment">// 如果要实现接口C，那么接口A和接口B的方法都要实现</span></span><br><span class="line">    A</span><br><span class="line">    B</span><br><span class="line">    test3()</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h3 id="接口断言"><a href="#接口断言" class="headerlink" title="接口断言"></a>接口断言</h3><figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Shape <span class="keyword">interface</span> {</span><br><span class="line">    peri() <span class="keyword">float64</span></span><br><span class="line">    area <span class="keyword">float64</span></span><br><span class="line">}</span><br><span class="line"><span class="keyword">type</span> Triangle <span class="keyword">struct</span> {</span><br><span class="line">    a,b,c <span class="keyword">float64</span></span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t Triangle)</span> <span class="title">peri</span><span class="params">()</span> <span class="title">float64</span></span> {</span><br><span class="line">    <span class="keyword">return</span> t.a + t.b + t.c</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t Triangle)</span> <span class="title">area</span> <span class="params">()</span><span class="title">float64</span></span> {</span><br><span class="line">    p = t.peri() / <span class="number">2</span></span><br><span class="line">    s := math.Sqrt(p*(p-t.a)*(p-t.b)*(p-t.c))</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getType</span><span class="params">(s Shape)</span></span> {</span><br><span class="line">    <span class="comment">// 断言  判断s的实际类型</span></span><br><span class="line">    <span class="keyword">if</span> ins, ok := s.(Triangle); ok {</span><br><span class="line">        fmt.Println(<span class="string">"is triangle"</span>)</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getType2</span> <span class="params">(s Shape)</span></span> {</span><br><span class="line">    <span class="keyword">switch</span> ins := s.(<span class="keyword">type</span>) {</span><br><span class="line">        <span class="keyword">case</span> Triangle:</span><br><span class="line">        fmt.Println(<span class="string">"is Triangle"</span>)</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
        <tag>Golang Days</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang 基础语法之六</title>
    <url>/2019/09/30/10-58-32/</url>
    <content><![CDATA[<h2 id="type关键字"><a href="#type关键字" class="headerlink" title="type关键字"></a>type 关键字</h2><p>定义类型</p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 定义新的类型</span></span><br><span class="line"><span class="keyword">type</span> myint <span class="keyword">int</span></span><br><span class="line"><span class="keyword">type</span> mystr <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义函数类型</span></span><br><span class="line"><span class="keyword">type</span> myfun <span class="function"><span class="keyword">func</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span><span class="params">(<span class="keyword">string</span>)</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fun1</span><span class="params">()</span><span class="title">myfun</span></span>{</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类型别名</span></span><br><span class="line"><span class="keyword">type</span> bieming = Type</span><br><span class="line"></span><br><span class="line"><span class="comment">// 别名不能添加本地方法，除非使用type定义新的类型（不使用等号）</span></span><br><span class="line"><span class="comment">// 别名嵌套注意混淆</span></span><br></pre></td></tr></tbody></table></figure>

<h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><h3 id="创建错误"><a href="#创建错误" class="headerlink" title="创建错误"></a>创建错误</h3><figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> {</span><br><span class="line">    log.Fatal(err)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<ul>
<li>使用 errors 包的 New 函数创建错误</li>
<li>使用 fmt 包下的 Errorf 函数创建错误</li>
</ul>
<h3 id="错误类型"><a href="#错误类型" class="headerlink" title="错误类型"></a>错误类型</h3><p>断言，然后获取错误信息</p>
<p>错误不要忽略</p>
<h3 id="自定义错误"><a href="#自定义错误" class="headerlink" title="自定义错误"></a>自定义错误</h3><p>实现 <code>error</code> 接口，实现方式如文档五所示</p>
<h3 id="panic和recover"><a href="#panic和recover" class="headerlink" title="panic和recover"></a>panic 和 recover</h3><p>panic 恐慌</p>
<p>恐慌后的代码不执行，已经 defer 的代码会执行</p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">funcA</span><span class="params">()</span></span> {</span><br><span class="line">    fmt.Println(<span class="string">"a"</span>)</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">funcB</span><span class="params">()</span></span> {</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<p>recover</p>
<p>捕获 panic</p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> {</span><br><span class="line">    <span class="keyword">if</span> msg := <span class="built_in">recover</span>; msg!=<span class="literal">nil</span> {</span><br><span class="line">        fmt.Println(<span class="string">"恢复主函数"</span>)</span><br><span class="line">    }</span><br><span class="line">}()</span><br></pre></td></tr></tbody></table></figure>

<p>适合 panic 场景：</p>
<ul>
<li>空指针引用</li>
<li>下标越界</li>
<li>除数为 0</li>
<li> 不应该出现的分支，比如 default</li>
<li> 输入不应该引起函数错误</li>
</ul>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
        <tag>Golang Days</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang 进阶实战之 IO 操作</title>
    <url>/2019/10/03/15-33-33/</url>
    <content><![CDATA[<h2 id="文件读写"><a href="#文件读写" class="headerlink" title="文件读写"></a>文件读写</h2><figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">    <span class="comment">// file文件操作</span></span><br><span class="line">    fileInfo, err := os.Stat(<span class="string">"aaa.txt"</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> {</span><br><span class="line">        fmt.Println(<span class="string">"error"</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    }</span><br><span class="line">    fmt.Println(fileInfo)</span><br><span class="line">    fmt.Println(fileInfo.Name())</span><br><span class="line">    fmt.Println(fileInfo.Size())</span><br><span class="line">    fmt.Println(fileInfo.IsDir())</span><br><span class="line">    <span class="comment">// 文件权限</span></span><br><span class="line">    fmt.Println(fileInfo.Mode())</span><br><span class="line">    fmt.Println(fileInfo.ModTime())</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 路径</span></span><br><span class="line">    fileName1 := <span class="string">"aaa.txt"</span></span><br><span class="line">    fmt.Println(filepath.Abs(fileName1))</span><br><span class="line">    fmt.Println(filepath.IsAbs(fileName1))</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建目录</span></span><br><span class="line">    err = os.MkdirAll(<span class="string">"aa"</span>, os.ModePerm)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> {</span><br><span class="line">        fmt.Println(<span class="string">"error"</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 创建Create 打开Open OpenFile 关闭Close 删除Remove RemoveAll</span></span><br><span class="line">    file, err2 := os.Create(<span class="string">"fileName2.txt"</span>)</span><br><span class="line">    <span class="keyword">if</span> err2 != <span class="literal">nil</span> {</span><br><span class="line">        fmt.Println(<span class="string">"error"</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    }</span><br><span class="line">    fmt.Println(file)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h2 id="数据读写"><a href="#数据读写" class="headerlink" title="数据读写"></a>数据读写</h2><figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">    <span class="comment">// io</span></span><br><span class="line">    <span class="comment">// 读取数据: Read</span></span><br><span class="line">    file, err := os.Open(<span class="string">"aaa.txt"</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> {</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">defer</span> file.Close()</span><br><span class="line"></span><br><span class="line">    bs := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">4</span>, <span class="number">4</span>)</span><br><span class="line">    <span class="comment">//n, err := file.Read(bs)</span></span><br><span class="line">    <span class="comment">//println(err)</span></span><br><span class="line">    <span class="comment">//println(n)</span></span><br><span class="line">    <span class="comment">//println(string(bs))</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">//n, err = file.Read(bs)</span></span><br><span class="line">    <span class="comment">//println(err)</span></span><br><span class="line">    <span class="comment">//println(n)</span></span><br><span class="line">    <span class="comment">//println(string(bs))</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">//n, err = file.Read(bs)</span></span><br><span class="line">    <span class="comment">//println(err)</span></span><br><span class="line">    <span class="comment">//println(n)</span></span><br><span class="line">    <span class="comment">//println(string(bs))</span></span><br><span class="line"></span><br><span class="line">    n := <span class="number">-1</span></span><br><span class="line">    <span class="keyword">for</span> {</span><br><span class="line">        n, err = file.Read(bs)</span><br><span class="line">        <span class="keyword">if</span> n == <span class="number">0</span> || err == io.EOF {</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        }</span><br><span class="line">        fmt.Println(<span class="keyword">string</span>(bs[:n]))</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 写入数据: Write</span></span><br><span class="line">    file2, err2 := os.OpenFile(<span class="string">"bbb.txt"</span>, os.O_CREATE|os.O_WRONLY|os.O_APPEND, os.ModePerm)</span><br><span class="line">    <span class="keyword">if</span> err2 != <span class="literal">nil</span> {</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">defer</span> file2.Close()</span><br><span class="line">    bs2 := []<span class="keyword">byte</span>{<span class="number">44</span>,<span class="number">55</span>,<span class="number">66</span>}</span><br><span class="line">    n2, err4 := file2.Write(bs2)</span><br><span class="line">    <span class="keyword">if</span> err4 != <span class="literal">nil</span> {</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    }</span><br><span class="line">    fmt.Println(n2)</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h2 id="io相关"><a href="#io相关" class="headerlink" title="io相关"></a>io 相关</h2><figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">    <span class="comment">// copy</span></span><br><span class="line">    <span class="comment">// 可以用Read和Write利用切片实现复制文件</span></span><br><span class="line">    <span class="comment">// io.Copy()</span></span><br><span class="line">    <span class="comment">// ioutil.ReadFile() ioutil.WriteFile()</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Seek接口设置读写文件偏移量</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 断点续传 ；利用临时文件记录传输了多少数据</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// bufio 添加缓冲区 提高io效率</span></span><br><span class="line">    <span class="comment">// buifo.NewReader(file)</span></span><br><span class="line">    <span class="comment">// Flush() 刷新缓冲区</span></span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
        <tag>Golang Days</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang 基础语法之四</title>
    <url>/2019/09/29/14-16-52/</url>
    <content><![CDATA[<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a>函数定义</h3><figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 声明</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">FuncName</span><span class="params">()</span></span> {</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">}</span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line">FuncName()</span><br></pre></td></tr></tbody></table></figure>

<p>函数调用的实参和形参必须一一对应，顺序，个数，类型</p>
<h3 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h3><figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">myFunc</span><span class="params">(arg ...<span class="keyword">int</span>)</span></span> {</span><br><span class="line">    <span class="keyword">for</span> _, n := <span class="keyword">range</span> arg {</span><br><span class="line">        fmt.Println(n)</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">myFunc(<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">s1 := []<span class="keyword">int</span>{<span class="number">1</span>,<span class="number">2</span>,<span class="number">34</span>,<span class="number">5</span>}</span><br><span class="line">myFunc(s1...)</span><br></pre></td></tr></tbody></table></figure>

<h3 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h3><ul>
<li>值传递 传递的是参数的副本</li>
<li>引用传递 传递的是参数的地址</li>
</ul>
<h3 id="函数中变量的作用域"><a href="#函数中变量的作用域" class="headerlink" title="函数中变量的作用域"></a>函数中变量的作用域</h3><p>作用域在函数中</p>
<h2 id="defer"><a href="#defer" class="headerlink" title="defer"></a>defer</h2><p>延迟函数或者方法的执行，等待外围函数执行完在执行 defer 中的内容。</p>
<p>如果存在多个 defer，执行 defer 依据类似栈结构，先进后出。</p>
<p>defer 函数调用时，函数的参数已经传递。</p>
<p>当外围函数中的语句正常执行完毕时，只有其中所有的延迟函数都执行完毕，外围函数才会真正的结束执行。</p>
<p>当执行外围函数中的 return 语句时，只有其中所有的延迟函数都执行完毕后，外围函数才会真正返回。当外围函数中的代码引发运行恐慌时，只有其中所有延迟函数都执行完毕后，该运行时恐慌才会被扩展至调用函数。</p>
<h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h3><p>Golang 支持函数式编程</p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">()</span></span> {</span><br><span class="line">    fmt.Println(<span class="string">"aaa"</span>)</span><br><span class="line">}()</span><br><span class="line"></span><br><span class="line">func3 = <span class="function"><span class="keyword">func</span> <span class="params">()</span></span> {</span><br><span class="line">    fmt.Println(<span class="string">"aaa"</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h3 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h3><p>函数作为另一个函数的参数，发生调用。</p>
<h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><p>一个外层函数中，有内层函数，该内层函数中，会操作外层函数的局部变量，并且该外层函数的返回值就是这个内层函数。</p>
<p>这个内层函数和外层函数的局部变量，统称为闭包结构。</p>
<p>局部变量的生命周期会发生改变，正常的局部变量随着函数的调用而创建，随着函数的结束而销毁。但闭包结构不会随着函数的结束而销毁，因为内层函数还要继续使用。</p>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
        <tag>Golang Days</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang 进阶实战之并发</title>
    <url>/2019/10/03/16-03-27/</url>
    <content><![CDATA[<h2 id="go"><a href="#go" class="headerlink" title="go"></a>go</h2><figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">    <span class="comment">// goroutine</span></span><br><span class="line">    <span class="comment">// 关键字go 主goroutine，子goroutine结束</span></span><br><span class="line">    <span class="keyword">go</span> printNum()</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">1</span>; i &lt; <span class="number">100</span>; i++ {</span><br><span class="line">        fmt.Println(<span class="string">"main:"</span>, i)</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printNum</span><span class="params">()</span></span> {</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">1</span>; i &lt; <span class="number">100</span>; i++ {</span><br><span class="line">        fmt.Println(<span class="string">"child: "</span>, i)</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h2 id="并发模型"><a href="#并发模型" class="headerlink" title="并发模型"></a>并发模型</h2><p>GPM</p>
<h2 id="runtime包"><a href="#runtime包" class="headerlink" title="runtime包"></a>runtime 包</h2><h2 id="临界资源安全"><a href="#临界资源安全" class="headerlink" title="临界资源安全"></a>临界资源安全</h2><p><code>var wg sync.WaitGroup</code> // 创建同步等待组对象</p>
<ul>
<li>Add</li>
<li>Wait</li>
<li>Done</li>
</ul>
<h2 id="互斥锁"><a href="#互斥锁" class="headerlink" title="互斥锁"></a>互斥锁</h2><p><code>var mutex sync.Mutex</code> // 创建锁</p>
<ul>
<li>Lock</li>
<li>UnLock</li>
</ul>
<h2 id="读写锁"><a href="#读写锁" class="headerlink" title="读写锁"></a>读写锁</h2><ul>
<li>读操作可以同时进行</li>
<li>写操作不可以同时进行，啥也不能干，不能读也不能写</li>
</ul>
<h2 id="channel通道"><a href="#channel通道" class="headerlink" title="channel通道"></a>channel 通道</h2><p>实现 goroutine 之间通信</p>
<h3 id="非缓冲通道"><a href="#非缓冲通道" class="headerlink" title="非缓冲通道"></a>非缓冲通道</h3><figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line">ch1 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line">ch1 &lt;- <span class="number">2</span> <span class="comment">// 写</span></span><br><span class="line">data := &lt;- ch1 <span class="comment">// 读</span></span><br><span class="line"><span class="comment">// 读写都是阻塞的，读写时对应的。不然会死锁</span></span><br></pre></td></tr></tbody></table></figure>

<p><code>close(ch1)</code> // 关闭通道</p>
<p>可以使用 <code>for ... range ch1</code> 访问通道</p>
<h3 id="缓冲通道"><a href="#缓冲通道" class="headerlink" title="缓冲通道"></a>缓冲通道</h3><ul>
<li>发送：缓冲区数据满了，才会阻塞</li>
<li>接收：缓冲区数据空了，才会阻塞</li>
</ul>
<p><code>ch2 := make(chan int, 5)</code></p>
<p>读取类似队列</p>
<h3 id="单向通道"><a href="#单向通道" class="headerlink" title="单向通道"></a>单向通道</h3><figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line">ch2 := <span class="built_in">make</span>(<span class="keyword">chan</span> &lt;- <span class="keyword">int</span>) <span class="comment">// 只能写</span></span><br><span class="line">ch2 := <span class="built_in">make</span>(&lt;- <span class="keyword">chan</span> <span class="keyword">int</span>) <span class="comment">// 只能读</span></span><br><span class="line"><span class="comment">// 一般用在函数中限制只读，只写</span></span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
        <tag>Golang Days</tag>
      </tags>
  </entry>
  <entry>
    <title>K8S</title>
    <url>/2021/07/01/20-00-00/</url>
    <content><![CDATA[<h2 id="Install-on-macOS"><a href="#Install-on-macOS" class="headerlink" title="Install on macOS"></a>Install on macOS</h2><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> https://minikube.sigs.k8s.io/docs/start/</span></span><br><span class="line">brew install kubectl</span><br><span class="line">brew install minikube</span><br><span class="line">kubectl version --client</span><br><span class="line">minikube version</span><br></pre></td></tr></tbody></table></figure>



<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">minikube start --driver=virtualbox --image-mirror-country cn --image-repository=registry.cn-hangzhou.aliyuncs.com/google_containers</span><br><span class="line">minikube status</span><br><span class="line">minikube dashboard</span><br><span class="line"></span><br><span class="line">kubectl get pods --all-namespaces</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> describe</span></span><br><span class="line">kubectl describe pods dashboard-metrics-scraper-8554f74445-qcf2t -n kubernetes-dashboard</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> minikube dashboard 503</span></span><br><span class="line">docker tag registry.cn-hangzhou.aliyuncs.com/google_containers/storage-provisioner:v4 registry.cn-hangzhou.aliyuncs.com/google_containers/k8s-minikube/storage-provisioner:v4</span><br><span class="line"></span><br><span class="line">docker tag registry.cn-hangzhou.aliyuncs.com/google_containers/metrics-scraper:v1.0.4 registry.cn-hangzhou.aliyuncs.com/google_containers/kubernetesui/metrics-scraper:v1.0.4</span><br><span class="line"></span><br><span class="line">docker tag registry.cn-hangzhou.aliyuncs.com/google_containers/dashboard:v2.1.0 registry.cn-hangzhou.aliyuncs.com/google_containers/kubernetesui/dashboard:v2.1.0</span><br></pre></td></tr></tbody></table></figure>



<h2 id="Docker-tag"><a href="#Docker-tag" class="headerlink" title="Docker tag"></a>Docker tag</h2><p><a href="https://www.cnblogs.com/hongdada/p/11395200.html">https://www.cnblogs.com/hongdada/p/11395200.html</a></p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">MY_REGISTRY=gcr.azk8s.cn/google-containers</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> pull image</span></span><br><span class="line">docker pull ${MY_REGISTRY}/kube-apiserver:v1.15.1</span><br><span class="line">docker pull ${MY_REGISTRY}/kube-controller-manager:v1.15.1</span><br><span class="line">docker pull ${MY_REGISTRY}/kube-scheduler:v1.15.1</span><br><span class="line">docker pull ${MY_REGISTRY}/kube-proxy:v1.15.1</span><br><span class="line">docker pull ${MY_REGISTRY}/pause:3.1</span><br><span class="line">docker pull ${MY_REGISTRY}/etcd:3.3.10</span><br><span class="line">docker pull ${MY_REGISTRY}/coredns:1.3.1</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> tag</span></span><br><span class="line">docker tag ${MY_REGISTRY}/kube-apiserver:v1.15.1 k8s.gcr.io/kube-apiserver:v1.15.1</span><br><span class="line">docker tag ${MY_REGISTRY}/kube-controller-manager:v1.15.1 k8s.gcr.io/kube-controller-manager:v1.15.1</span><br><span class="line">docker tag ${MY_REGISTRY}/kube-scheduler:v1.15.1 k8s.gcr.io/kube-scheduler:v1.15.1</span><br><span class="line">docker tag ${MY_REGISTRY}/kube-proxy:v1.15.1 k8s.gcr.io/kube-proxy:v1.15.1</span><br><span class="line">docker tag ${MY_REGISTRY}/pause:3.1 k8s.gcr.io/pause:3.1</span><br><span class="line">docker tag ${MY_REGISTRY}/etcd:3.3.10 k8s.gcr.io/etcd:3.3.10</span><br><span class="line">docker tag ${MY_REGISTRY}/coredns:1.3.1 k8s.gcr.io/coredns:1.3.1</span><br><span class="line"><span class="meta"> </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> delete</span></span><br><span class="line">docker images | grep ${MY_REGISTRY} | awk '{print "docker rmi "  $1":"$2}' | sh -x</span><br><span class="line"></span><br><span class="line">echo "end"</span><br></pre></td></tr></tbody></table></figure>

<h2 id="Create-service"><a href="#Create-service" class="headerlink" title="Create service"></a>Create service</h2><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">kubectl create deployment hello-nginx --image=nginx --port=80</span><br><span class="line">kubectl expose deployment hello-nginx --type=NodePort --port=80</span><br><span class="line">kubectl get services hello-nginx</span><br><span class="line">minikube service hello-nginx</span><br><span class="line"></span><br><span class="line">kubectl delete services hello-nginx</span><br><span class="line">kubectl delete deployment hello-nginx</span><br></pre></td></tr></tbody></table></figure>

]]></content>
      <categories>
        <category>K8S</category>
      </categories>
      <tags>
        <tag>Minikube</tag>
        <tag>K8S</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux-CentOS7 Install MySQL5.7</title>
    <url>/2019/10/08/20-27-17/</url>
    <content><![CDATA[<h2 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h2><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">wget 'https://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm'</span><br><span class="line"></span><br><span class="line">rpm -Uvh mysql57-community-release-el7-11.noarch.rpm</span><br><span class="line"></span><br><span class="line">yum repolist all | grep mysql</span><br><span class="line"></span><br><span class="line">yum install -y mysql-community-server</span><br></pre></td></tr></tbody></table></figure>

<h2 id="Configuration"><a href="#Configuration" class="headerlink" title="Configuration"></a>Configuration</h2><h3 id="Start-mysqld"><a href="#Start-mysqld" class="headerlink" title="Start mysqld"></a>Start mysqld</h3><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">systemctl start mysqld</span><br></pre></td></tr></tbody></table></figure>

<h3 id="View-temporary-password"><a href="#View-temporary-password" class="headerlink" title="View temporary password"></a>View temporary password</h3><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">grep password /var/log/mysqld.log</span><br></pre></td></tr></tbody></table></figure>

<h3 id="Login"><a href="#Login" class="headerlink" title="Login"></a>Login</h3><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">mysql -u root -p</span><br><span class="line"><span class="meta">#</span><span class="bash"> enter password</span></span><br><span class="line"></span><br><span class="line">set password=password("Mysql_123");</span><br><span class="line"></span><br><span class="line">exit</span><br></pre></td></tr></tbody></table></figure>

<h3 id="Open-remote-access"><a href="#Open-remote-access" class="headerlink" title="Open remote access"></a>Open remote access</h3><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">mysql -u root -p</span><br><span class="line"><span class="meta">#</span><span class="bash"> enter password</span></span><br><span class="line">use mysql;</span><br><span class="line"></span><br><span class="line">update user set host = '%' where user = 'root';</span><br><span class="line"></span><br><span class="line">exit</span><br></pre></td></tr></tbody></table></figure>

<h3 id="Restart-mysqld"><a href="#Restart-mysqld" class="headerlink" title="Restart mysqld"></a>Restart mysqld</h3><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">systemctl restart mysqld</span><br></pre></td></tr></tbody></table></figure>

<h3 id="Open-self-starting"><a href="#Open-self-starting" class="headerlink" title="Open self-starting"></a>Open self-starting</h3><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">systemctl enable mysqld</span><br><span class="line">systemctl daemon-reload</span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Database</tag>
      </tags>
  </entry>
  <entry>
    <title>Python - 排序算法</title>
    <url>/2019/09/28/20-17-18/</url>
    <content><![CDATA[<h2 id="顺序查找（Sequence-Search）"><a href="#顺序查找（Sequence-Search）" class="headerlink" title="顺序查找（Sequence Search）"></a>顺序查找（Sequence Search）</h2><p>顺序查找是按照序列原有顺序对数组进行遍历比较查询的基本查找算法。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">seq_search</span>(<span class="params">items, elem</span>):</span></span><br><span class="line">    <span class="string">"""顺序查找"""</span></span><br><span class="line">    <span class="keyword">for</span> index, item <span class="keyword">in</span> <span class="built_in">enumerate</span>(items):</span><br><span class="line">        <span class="keyword">if</span> item == elem:</span><br><span class="line">            <span class="keyword">return</span> index</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span></span><br></pre></td></tr></tbody></table></figure>

<h2 id="二分查找-折半查找（Binary-Search）"><a href="#二分查找-折半查找（Binary-Search）" class="headerlink" title="二分查找/折半查找（Binary Search）"></a>二分查找 / 折半查找（Binary Search）</h2><p>二分查找是一种效率较高的查找方法。但是，折半查找要求线性表必须采用顺序存储结构，而且表中元素按关键字有序排列。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bin_search</span>(<span class="params">items, elem</span>):</span></span><br><span class="line">    <span class="string">"""折半查找(二分查找)"""</span></span><br><span class="line">    start, end = <span class="number">0</span>, <span class="built_in">len</span>(items) - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> start &lt;= end:</span><br><span class="line">        mid = (start + end) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> elem &lt; items[mid]: end = mid - <span class="number">1</span> <span class="keyword">elif</span> elem &gt; items[mid]:</span><br><span class="line">            start = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> mid</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span></span><br></pre></td></tr></tbody></table></figure>

<h2 id="冒泡排序（Bubble-Sort）"><a href="#冒泡排序（Bubble-Sort）" class="headerlink" title="冒泡排序（Bubble Sort）"></a>冒泡排序（Bubble Sort）</h2><p>冒泡排序是一种计算机科学领域的较简单的排序算法。它重复地走访过要排序的元素列，依次比较两个相邻的元素，如果他们的顺序（如从大到小、首字母从 A 到 Z）错误就把他们交换过来。走访元素的工作是重复地进行直到没有相邻元素需要交换，也就是说该元素已经排序完成。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 实现排序自定义，避免极端情况，正向逆向都比较一次</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bubble_sort</span>(<span class="params">origin_items, *, comp=<span class="keyword">lambda</span> x, y: x &gt; y</span>):</span></span><br><span class="line">    <span class="string">"""冒泡排序"""</span></span><br><span class="line">    items = origin_items[:]</span><br><span class="line">    length = <span class="built_in">len</span>(items)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, length):</span><br><span class="line">        swapped = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, length - i):</span><br><span class="line">            <span class="keyword">if</span> comp(items[j], items[j + <span class="number">1</span>]):</span><br><span class="line">                items[j], items[j + <span class="number">1</span>] = items[j + <span class="number">1</span>], items[j]</span><br><span class="line">                swapped = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">if</span> swapped:</span><br><span class="line">            swapped = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(length - i - <span class="number">1</span>, i - <span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">                <span class="keyword">if</span> comp(items[j - <span class="number">1</span>], items[j]):</span><br><span class="line">                    items[j - <span class="number">1</span>], items[j] = items[j], items[j - <span class="number">1</span>]</span><br><span class="line">                    swapped = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> swapped:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> items</span><br></pre></td></tr></tbody></table></figure>

<h2 id="归并排序（Merge-Sort）"><a href="#归并排序（Merge-Sort）" class="headerlink" title="归并排序（Merge Sort）"></a>归并排序（Merge Sort）</h2><p>归并排序是建立在归并操作上的一种有效的排序算法，该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序表，称为二路归并。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge</span>(<span class="params">list1, list2, comp=<span class="keyword">lambda</span> x, y: x &lt;= y</span>):</span></span><br><span class="line">    <span class="string">""""有序合并(将两个有序的列表合并成一个新的有序的列表)"""</span></span><br><span class="line">    list3 = []</span><br><span class="line">    index1, index2 = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> index1 &lt; <span class="built_in">len</span>(list1) <span class="keyword">and</span> index2 &lt; <span class="built_in">len</span>(list2):</span><br><span class="line">        <span class="keyword">if</span> comp(list1[index1], list2[index2]):</span><br><span class="line">            list3.append(list1[index1])</span><br><span class="line">            index1 += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            list3.append(list2[index2])</span><br><span class="line">            index2 += <span class="number">1</span></span><br><span class="line">    list3 += list1[index1:]</span><br><span class="line">    list3 += list2[index2:]</span><br><span class="line">    <span class="keyword">return</span> list3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge_sort</span>(<span class="params">origin_items, comp=<span class="keyword">lambda</span> x, y: x &lt;= y</span>):</span></span><br><span class="line">    <span class="string">"""归并排序"""</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(origin_items) &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> origin_items[:]</span><br><span class="line">    mid = <span class="built_in">len</span>(origin_items) // <span class="number">2</span></span><br><span class="line">    left = merge_sort(origin_items[:mid], comp)</span><br><span class="line">    right = merge_sort(origin_items[mid:], comp)</span><br><span class="line">    <span class="keyword">return</span> merge(left, right, comp)</span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>Python–zlib/hashlib/rsa</title>
    <url>/2019/09/28/20-11-21/</url>
    <content><![CDATA[<h2 id="zlib-数据压缩解压缩库"><a href="#zlib-数据压缩解压缩库" class="headerlink" title="zlib-数据压缩解压缩库"></a>zlib - 数据压缩解压缩库</h2><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> zlib</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_to_file</span>(<span class="params">data</span>):</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'begin_file.txt'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># zlib.compress 用来压缩字符串的bytes类型</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">str_zlib</span>():</span></span><br><span class="line">    response = requests.get(<span class="string">"https://www.baidu.com"</span>)</span><br><span class="line">    message = response.text</span><br><span class="line">    bytes_message = <span class="built_in">str</span>.encode(message)</span><br><span class="line">    save_to_file(bytes_message)</span><br><span class="line">    compressed = zlib.compress(bytes_message, zlib.Z_BEST_COMPRESSION)</span><br><span class="line">    decompressed = zlib.decompress(compressed)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"original string:"</span>, <span class="built_in">len</span>(message))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"original bytes:"</span>, <span class="built_in">len</span>(bytes_message))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"compressed:"</span>, <span class="built_in">len</span>(compressed))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"decompressed:"</span>, <span class="built_in">len</span>(decompressed))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># zlib.compressobj 用来压缩数据流，用于文件传输</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">file_compress</span>(<span class="params">begin_file, zlib_file, level</span>):</span></span><br><span class="line">    infile = <span class="built_in">open</span>(begin_file, <span class="string">"rb"</span>)</span><br><span class="line">    zfile = <span class="built_in">open</span>(zlib_file, <span class="string">"wb"</span>)</span><br><span class="line">    compressobj = zlib.compressobj(level)</span><br><span class="line">    data = infile.read(<span class="number">1024</span>)</span><br><span class="line">    <span class="keyword">while</span> data:</span><br><span class="line">        zfile.write(compressobj.compress(data))</span><br><span class="line">        <span class="comment"># 继续读取文件中的下一个size的内容</span></span><br><span class="line">        data = infile.read(<span class="number">1024</span>)</span><br><span class="line">    <span class="comment"># compressobj.flush()包含剩余压缩输出的字节对象，将剩余的字节内容写入到目标文件中</span></span><br><span class="line">    zfile.write(compressobj.flush())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">file_decompress</span>(<span class="params">zlib_file, end_file</span>):</span></span><br><span class="line">    zlib_file = <span class="built_in">open</span>(zlib_file, <span class="string">"rb"</span>)</span><br><span class="line">    end_file = <span class="built_in">open</span>(end_file, <span class="string">"wb"</span>)</span><br><span class="line">    decompressobj = zlib.decompressobj()</span><br><span class="line">    data = zlib_file.read(<span class="number">1024</span>)</span><br><span class="line">    <span class="keyword">while</span> data:</span><br><span class="line">        end_file.write(decompressobj.decompress(data))</span><br><span class="line">        data = zlib_file.read(<span class="number">1024</span>)</span><br><span class="line">    end_file.write(decompressobj.flush())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="comment"># 测试字符串的压缩与解压</span></span><br><span class="line">    str_zlib()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 测试数据流压缩</span></span><br><span class="line">    begin_file = <span class="string">"./begin_file.txt"</span></span><br><span class="line">    zlib_file = <span class="string">"./zlib_file.txt"</span></span><br><span class="line">    level = <span class="number">9</span></span><br><span class="line">    file_compress(begin_file, zlib_file, level)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 测试数据流解压</span></span><br><span class="line">    zlib_file = <span class="string">"./zlib_file.txt"</span></span><br><span class="line">    end_file = <span class="string">"./end_file.txt"</span></span><br><span class="line">    file_decompress(zlib_file, end_file)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></tbody></table></figure>

<h2 id="hashlib-哈希摘要生成器"><a href="#hashlib-哈希摘要生成器" class="headerlink" title="hashlib-哈希摘要生成器"></a>hashlib - 哈希摘要生成器</h2><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha1</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha512</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StreamHasher</span>():</span></span><br><span class="line">    <span class="string">"""哈希摘要生成器"""</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, algorithm=<span class="string">'md5'</span>, size=<span class="number">1024</span></span>):</span></span><br><span class="line">        self.size = size</span><br><span class="line">        alg = algorithm.lower()</span><br><span class="line">        <span class="keyword">if</span> alg == <span class="string">'md5'</span>:</span><br><span class="line">            self.hasher = md5()</span><br><span class="line">        <span class="keyword">elif</span> alg == <span class="string">'sha1'</span>:</span><br><span class="line">            self.hasher = sha1()</span><br><span class="line">        <span class="keyword">elif</span> alg == <span class="string">'sha256'</span>:</span><br><span class="line">            self.hasher = sha256()</span><br><span class="line">        <span class="keyword">elif</span> alg == <span class="string">'sha512'</span>:</span><br><span class="line">            self.hasher = sha512()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">'不支持指定的摘要算法'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 魔法方法: 让对象可以像函数一样被调用</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span>(<span class="params">self, stream</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.to_digest(stream)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">to_digest</span>(<span class="params">self, stream</span>):</span></span><br><span class="line">        <span class="string">"""生成十六进制形式的哈希摘要字符串"""</span></span><br><span class="line">        <span class="keyword">for</span> data <span class="keyword">in</span> <span class="built_in">iter</span>(<span class="keyword">lambda</span>: stream.read(self.size), <span class="string">b''</span>):</span><br><span class="line">            self.hasher.update(data)</span><br><span class="line">        <span class="keyword">return</span> self.hasher.hexdigest()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="string">"""主函数"""</span></span><br><span class="line">    hasher = StreamHasher(<span class="string">'sha1'</span>, <span class="number">4096</span>)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'Python魔法方法指南.pdf'</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> stream:</span><br><span class="line">        <span class="comment"># print(hasher.to_digest(stream))</span></span><br><span class="line">        <span class="built_in">print</span>(hasher(stream))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></tbody></table></figure>

<h2 id="rsa-加密库"><a href="#rsa-加密库" class="headerlink" title="rsa-加密库"></a>rsa - 加密库</h2><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> rsa</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成密钥</span></span><br><span class="line">(pubkey, privkey) = rsa.newkeys(<span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存密钥</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'public.pem'</span>, <span class="string">'w+'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(pubkey.save_pkcs1().decode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'private.pem'</span>, <span class="string">'w+'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(privkey.save_pkcs1().decode())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入密钥</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'public.pem'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    pubkey = rsa.PublicKey.load_pkcs1(f.read().encode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'private.pem'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    privkey = rsa.PrivateKey.load_pkcs1(f.read().encode())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 明文</span></span><br><span class="line">message = <span class="string">'zhezhendeshiyigemima'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 公钥加密</span></span><br><span class="line">crypto = rsa.encrypt(message.encode(), pubkey)</span><br><span class="line"><span class="built_in">print</span>(crypto)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 私钥解密</span></span><br><span class="line">message = rsa.decrypt(crypto, privkey).decode()</span><br><span class="line"><span class="built_in">print</span>(message)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 私钥签名</span></span><br><span class="line">signature = rsa.sign(message.encode(), privkey, <span class="string">'SHA-1'</span>)</span><br><span class="line"><span class="built_in">print</span>(signature)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 公钥验证</span></span><br><span class="line">result = rsa.verify(message.encode(), signature, pubkey)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows Automatic Remote Desktop</title>
    <url>/2019/09/27/22-23-47/</url>
    <content><![CDATA[<p>Based on Windows Server 2012</p>
<h3 id="premise"><a href="#premise" class="headerlink" title="premise"></a>premise</h3><ul>
<li>remote machine need open winrm service</li>
<li>base host need PsExec.exe for start up display</li>
</ul>
<h3 id="bat-script"><a href="#bat-script" class="headerlink" title="bat script"></a>bat script</h3><figure class="highlight bat"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">REM Skip popup</span></span><br><span class="line">REG ADD "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Terminal Server Client" /v AuthenticationLevelOverride /t REG_DWORD /d <span class="number">0</span> /f</span><br><span class="line"><span class="comment">REM Modify group policy</span></span><br><span class="line">REG ADD "HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Microsoft\Windows\CredentialsDelegation\AllowSavedCredentialsWhenNTLMOnly" /v <span class="number">1</span> /t RED_SZ /d TERMSRV/* /f</span><br><span class="line"><span class="comment">REM Update group policy</span></span><br><span class="line">gpupdate /force</span><br><span class="line"><span class="comment">REM Add login credentials</span></span><br><span class="line">CMDKEY /add:remote_ip /user:user /pass:password</span><br><span class="line"><span class="comment">REM Remote desktop</span></span><br><span class="line">MSTSC /v:remote_ip:remote_port</span><br></pre></td></tr></tbody></table></figure>

<h3 id="start-the-script-by-command"><a href="#start-the-script-by-command" class="headerlink" title="start the script by command"></a>start the script by command</h3><figure class="highlight bat"><table><tbody><tr><td class="code"><pre><span class="line">PsExec.exe \\ip -accepteula -u user -p password -i <span class="built_in">cmd</span></span><br></pre></td></tr></tbody></table></figure>

<p>or use <code>query user</code> find ID</p>
<figure class="highlight bat"><table><tbody><tr><td class="code"><pre><span class="line">PsExec.exe \\ip -accepteula -u user -p password -i ID <span class="built_in">cmd</span></span><br></pre></td></tr></tbody></table></figure>

<h3 id="About-wmic"><a href="#About-wmic" class="headerlink" title="About wmic"></a>About wmic</h3><p>open remote desktop service</p>
<figure class="highlight bat"><table><tbody><tr><td class="code"><pre><span class="line">wmic /node:"[full machine name]" /USER:"[domain]\[username]" <span class="built_in">PATH</span> win32_terminalservicesetting WHERE (__Class!="") <span class="keyword">CALL</span> SetAllowTSConnections <span class="number">1</span></span><br></pre></td></tr></tbody></table></figure>

<p>use wmic open remote process</p>
<figure class="highlight bat"><table><tbody><tr><td class="code"><pre><span class="line">wmic /node:ip /user:"administrator" /password:"password" process <span class="keyword">call</span> create commandline="command"</span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>PsExec</tag>
        <tag>bat</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows Server 2012 R2 FTP Server</title>
    <url>/2019/09/28/16-52-20/</url>
    <content><![CDATA[<p>打开 Windows Server 2012 R2 <strong>服务器管理器界面</strong>  添加角色和功能</p>
<p><img src="../images/2019/20190320-001.png" alt="001"></p>
<p>添加角色和功能向导里，选择 从<strong>服务器池中选择服务器</strong></p>
<p><img src="../images/2019/20190320-002.png" alt="002"></p>
<p>选择 Web 服务器（IIS）<strong>安装 FTP 服务器</strong></p>
<p><img src="../images/2019/20190320-003.png" alt="003"></p>
<p>安装完成后，在服务器管理器右上角有个点击 “<strong>工具</strong>”–&gt; 选择 “<strong>IIS 管理器</strong>”</p>
<p><img src="../images/2019/20190320-004.png" alt="004"></p>
<p>点击 <strong>IIS 服务器证书</strong></p>
<p><img src="../images/2019/20190320-005.png" alt="005"></p>
<p>FTP 界面上选择 “<strong>FTP 身份验证</strong>”——&gt;“<strong>基本身份验证</strong>”–&gt;” 启用”</p>
<p><img src="../images/2019/20190320-006.png" alt="006"></p>
<p>FTP 界面选择 “<strong>FTP 授权规则</strong> “—&gt; 右侧 “<strong>添加允许规则</strong>”–&gt; 选择 “<strong>指定的角色或用户组</strong>”, 以及权限选择，“<strong>读取 写入</strong></p>
<p><img src="../images/2019/20190320-007.png" alt="007"></p>
<p>完成所有前戏后，接下来就开始进行建立 FTP 网站，点击 IIS 管理器界面 “<strong>网站</strong>”，点击右侧添加 “<strong>FTP 站点</strong>”，FTP 站点名称可以任意取，内容目录为服务器上提供上传、下载文件保存目录。</p>
<p><img src="../images/2019/20190320-008.png" alt="008"></p>
<p>点击 “<strong>下一步</strong>” 绑定 IP 可以选取指定 IP，也可以默认，端口号默认 21，勾选下面 “<strong>自动启动 FTP 站点</strong>” 导入刚才建立的 SSL 证书</p>
<p><img src="../images/2019/20190320-009.png" alt="009"></p>
<p>点击 “<strong>下一步</strong>” 身份验证和授权信息配置</p>
<p><img src="../images/2019/20190320-010.png" alt="010"></p>
<p>配置完成（浏览器和 FTP 客户端软件上登陆）</p>
<figure class="highlight bat"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function">ftp://<span class="title">ip</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"># 提示输入账户密码</span></span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>FTP</tag>
      </tags>
  </entry>
</search>
